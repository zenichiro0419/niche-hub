/**
 * @file Sidebar.tsx
 * @brief „Çµ„Ç§„Éâ„Éê„Éº„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà
 * @description „Ç≥„Éü„É•„Éã„ÉÜ„Ç£Âàá„ÇäÊõø„Åà„Éª„Éä„Éì„Ç≤„Éº„Ç∑„Éß„É≥Áî®„Çµ„Ç§„Éâ„Éê„Éº„ÄÇ„Éá„Çπ„ÇØ„Éà„ÉÉ„Éó„ÅØÂõ∫ÂÆö„ÄÅ„É¢„Éê„Ç§„É´„ÅØDrawer„ÄÇRedux Toolkit„ÅßÁÆ°ÁêÜ„Åô„Çã„Ç≥„Éü„É•„Éã„ÉÜ„Ç£„É™„Çπ„Éà„ÇíË°®Á§∫„ÄÇ
 * @limitations „Éê„ÉÉ„ÇØ„Ç®„É≥„ÉâÈÄ£Êê∫„ÉªË©≥Á¥∞Ê®©ÈôêÁÆ°ÁêÜ„ÅØÊú™ÂÆüË£Ö„ÄÇUI„ÅÆ„Åø„ÄÇ
 */
import React, { useState } from "react";
import {
  Drawer,
  List,
  ListItem,
  ListItemButton,
  ListItemIcon,
  ListItemText,
  Avatar,
  Divider,
  IconButton,
  useMediaQuery,
  Box,
  Typography,
  Menu,
  MenuItem,
} from "@mui/material";
import MenuIcon from "@mui/icons-material/Menu";
import HomeIcon from "@mui/icons-material/Home";
import PersonIcon from "@mui/icons-material/Person";
import NotificationsIcon from "@mui/icons-material/Notifications";
import AdminPanelSettingsIcon from "@mui/icons-material/AdminPanelSettings";
import { useSelector, useDispatch } from "react-redux";
import type { RootState } from "../store";
import { useNavigate, useLocation } from "react-router-dom";
import { setCurrentCommunityId } from "../store/communitySlice";

// „ÉÄ„Éü„Éº„Ç≥„Éü„É•„Éã„ÉÜ„Ç£„É™„Çπ„ÉàÔºàSelectCommunity.tsx„Å®Âêå„ÅòÊßãÈÄ†Ôºâ
const dummyCommunities = [
  {
    id: "1",
    name: "„Éó„É≠„Ç∞„É©„Éü„É≥„Ç∞",
    description: "„Ç≥„Éº„Éâ„ÇÑÊäÄË°ì„ÅÆË©±È°å",
    icon: "üíª",
  },
  { id: "2", name: "ÂÜôÁúü", description: "„Ç´„É°„É©„ÉªÂÜôÁúüÂ•Ω„Åç„ÅÆÈõÜ„ÅÑ", icon: "üì∑" },
  { id: "3", name: "Èü≥Ê•Ω", description: "Èü≥Ê•ΩÈëëË≥û„ÉªÊºîÂ•è", icon: "üéµ" },
  { id: "4", name: "Ë™≠Êõ∏", description: "Êú¨„Éª„Éû„É≥„Ç¨„ÉªÂ∞èË™¨", icon: "üìö" },
  {
    id: "5",
    name: "„Ç¢„Ç¶„Éà„Éâ„Ç¢",
    description: "„Ç≠„É£„É≥„Éó„ÉªÁôªÂ±±„ÉªÈá£„Çä",
    icon: "ÔøΩÔøΩÔ∏è",
  },
];

/**
 * „Çµ„Ç§„Éâ„Éê„Éº„ÅÆÂπÖ
 * @type {number}
 */
const drawerWidth = 240;

/**
 * „Çµ„Ç§„Éâ„Éê„Éº„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà
 * @returns {JSX.Element} „Çµ„Ç§„Éâ„Éê„ÉºUI
 */
const Sidebar: React.FC = () => {
  const isMobile = useMediaQuery("(max-width:768px)");
  const [open, setOpen] = useState(false);
  const navigate = useNavigate();
  const location = useLocation();
  const dispatch = useDispatch();
  const currentCommunityId = useSelector(
    (state: RootState) =>
      (state.community as { currentCommunityId: string }).currentCommunityId
  );

  // „Ç≥„Éü„É•„Éã„ÉÜ„Ç£„É°„Éã„É•„ÉºÁî®state
  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);
  const menuOpen = Boolean(anchorEl);

  // „Éï„Ç£„Éº„Éâ„Éú„Çø„É≥Êäº‰∏ã„Åß„É°„Éã„É•„ÉºË°®Á§∫
  const handleFeedClick = (event: React.MouseEvent<HTMLElement>) => {
    setAnchorEl(event.currentTarget);
  };
  const handleMenuClose = () => {
    setAnchorEl(null);
  };
  const handleCommunitySelect = (id: string) => {
    dispatch(setCurrentCommunityId(id));
    setAnchorEl(null);
    navigate("/feed");
  };

  /**
   * „Éä„Éì„Ç≤„Éº„Ç∑„Éß„É≥„É™„Çπ„Éà
   * @type {{ label: string, icon: React.ReactNode, path: string }[]}
   */
  const navItems = [
    { label: "„Éï„Ç£„Éº„Éâ", icon: <HomeIcon />, path: "/feed", isFeed: true },
    { label: "„Éó„É≠„Éï„Ç£„Éº„É´", icon: <PersonIcon />, path: "/profile-edit" },
    { label: "ÈÄöÁü•", icon: <NotificationsIcon />, path: "/notifications" },
    { label: "ÁÆ°ÁêÜËÄÖ", icon: <AdminPanelSettingsIcon />, path: "/admin" },
  ];

  /**
   * „Çµ„Ç§„Éâ„Éê„ÉºÊú¨‰Ωì
   */
  const sidebarContent = (
    <Box sx={{ width: drawerWidth }} role="presentation">
      <Typography variant="h6" sx={{ p: 2, textAlign: "center" }}>
        NicheHub
      </Typography>
      <Divider />
      <List>
        {navItems.map((item) => (
          <ListItem key={item.label} disablePadding>
            {item.isFeed ? (
              <>
                <ListItemButton
                  onClick={handleFeedClick}
                  selected={location.pathname === item.path}
                  sx={{
                    "&.Mui-selected": {
                      bgcolor: "#eceff1",
                      color: "#5c6bc0",
                      fontWeight: "bold",
                    },
                    "&:hover": {
                      bgcolor: "#f0f4ff",
                    },
                  }}
                >
                  <ListItemIcon
                    sx={{
                      color:
                        location.pathname === item.path ? "#5c6bc0" : undefined,
                    }}
                  >
                    {item.icon}
                  </ListItemIcon>
                  <ListItemText primary={item.label} />
                </ListItemButton>
                <Menu
                  anchorEl={anchorEl}
                  open={menuOpen}
                  onClose={handleMenuClose}
                  anchorOrigin={{ vertical: "bottom", horizontal: "left" }}
                  transformOrigin={{ vertical: "top", horizontal: "left" }}
                >
                  {dummyCommunities.map((c) => (
                    <MenuItem
                      key={c.id}
                      selected={currentCommunityId === c.id}
                      onClick={() => handleCommunitySelect(c.id)}
                    >
                      <ListItemIcon>
                        <Avatar
                          sx={{
                            bgcolor: "#eceff1",
                            color: "#263238",
                            width: 24,
                            height: 24,
                          }}
                        >
                          {c.icon}
                        </Avatar>
                      </ListItemIcon>
                      <ListItemText primary={c.name} />
                    </MenuItem>
                  ))}
                </Menu>
              </>
            ) : (
              <ListItemButton
                onClick={() => navigate(item.path)}
                selected={location.pathname === item.path}
                sx={{
                  "&.Mui-selected": {
                    bgcolor: "#eceff1",
                    color: "#5c6bc0",
                    fontWeight: "bold",
                  },
                  "&:hover": {
                    bgcolor: "#f0f4ff",
                  },
                }}
              >
                <ListItemIcon
                  sx={{
                    color:
                      location.pathname === item.path ? "#5c6bc0" : undefined,
                  }}
                >
                  {item.icon}
                </ListItemIcon>
                <ListItemText primary={item.label} />
              </ListItemButton>
            )}
          </ListItem>
        ))}
      </List>
      <Divider />
    </Box>
  );

  return (
    <>
      {isMobile ? (
        <>
          <IconButton
            color="inherit"
            aria-label="open drawer"
            edge="start"
            onClick={() => setOpen(true)}
            sx={{ m: 1 }}
          >
            <MenuIcon />
          </IconButton>
          <Drawer anchor="left" open={open} onClose={() => setOpen(false)}>
            {sidebarContent}
          </Drawer>
        </>
      ) : (
        <Drawer
          variant="permanent"
          sx={{
            width: drawerWidth,
            flexShrink: 0,
            [`& .MuiDrawer-paper`]: {
              width: drawerWidth,
              boxSizing: "border-box",
            },
          }}
          open
        >
          {sidebarContent}
        </Drawer>
      )}
    </>
  );
};

export default Sidebar;
